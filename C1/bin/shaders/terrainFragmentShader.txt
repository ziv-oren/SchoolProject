#version 400 core

//data from vertex shader
in vec2 pass_textureCoords;
in vec3 surfaceNormal;
in vec3 toLightVector;
in vec3 toCameraVector;
in float visibility;


//final color of calculated pixel
out vec4 outColor;


//uniforms
uniform sampler2D darkTexture;
uniform sampler2D rTexture;
uniform sampler2D gTexture;
uniform sampler2D bTexture;
uniform sampler2D blendMap;


uniform vec3 lightColour;
uniform float shineDamper;
uniform float reflectivity;
uniform vec3 skyColor;

void main(void){

	vec4 blendMapColor = texture(blendMap, pass_textureCoords); //takes the color from the blend map
	
	float darkTextureAmount  = 1 - (blendMapColor.r + blendMapColor.g + blendMapColor.b); //amount of black color in pixel
	vec2 tiledCoords = pass_textureCoords * 40;
	vec4 darkTextureColor = texture(darkTexture, tiledCoords) * darkTextureAmount; //color from each texture
	vec4 rTextureColor = texture(rTexture, tiledCoords) * blendMapColor.r;
	vec4 gTextureColor = texture(gTexture, tiledCoords) * blendMapColor.g;
	vec4 bTextureColor = texture(bTexture, tiledCoords) * blendMapColor.b;

	vec4 totalColor =  darkTextureColor + rTextureColor + gTextureColor + bTextureColor; //final color of textures combination

	vec3 unitNormal = normalize(surfaceNormal); //normalizes normal (changes vec length to 1)
	vec3 unitLightVector = normalize(toLightVector); //normalize to light vector
	
	float nDotl = dot(unitNormal,unitLightVector); //evaluates the angle between normal and light to surface vectors
	float brightness = max(nDotl,0.2); //sets a limit to darkness on objects to 0.2f
	vec3 diffuse = brightness * lightColour; //calculate the diffuse from the light to the pixel considering both color and brightness, how much light a point on the entity gets      
	
	vec3 unitVectorToCamera = normalize(toCameraVector); //normalize vector from surface to cam
	vec3 lightDirection = -unitLightVector; //calculates light direction
	vec3 reflectedLightDirection = reflect(lightDirection,unitNormal); //calculates reflected light direction
	
	float specularFactor = dot(reflectedLightDirection , unitVectorToCamera); //calculates the reflected light from the entity
	specularFactor = max(specularFactor,0.0);
	float dampedFactor = pow(specularFactor,shineDamper);
	vec3 finalSpecular = dampedFactor * reflectivity * lightColour; //calculates the reflected light from the object considering the surface reflectivity and shine damper
	

	outColor =  vec4(diffuse,1.0) * totalColor + vec4(finalSpecular,1.0); //calculates the final color of a pixel
	outColor = mix(vec4(skyColor,1),outColor, visibility);
}